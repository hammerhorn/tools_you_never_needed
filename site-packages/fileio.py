"""
Functions for loading saved data from pickle or json files
"""
import pickle
import glob
import json
import os
import time

from termcolor import colored

import lists
import textwidgets

def open_p_file(filename=None, dirname='.'):
    """
    Loads a pickle file.  Prompts user for a file name if one is not
    provided.

    stored_obj = open_p_file()
    stored_obj = open_p_file(filename)
    """
    if filename:
        pickle_list = []
        if dirname:
            filename = f'{dirname}/{filename}'
    else:
        pickle_list = glob.glob(f'{dirname}/*.p')

        # Let user select file, if none given
        open_menu = lists.ListPrompt(pickle_list)
        open_menu.label = 'Choose a file to open:'
        selection = open_menu.input()
        filename = pickle_list[selection - 1]
    a_file = open(filename, 'rb')
    pcontents = pickle.load(a_file)
#    termctl.clear(len(pickle_list) + 5)
    return pcontents


def read_json_file(filename):
    """
    Extract data from JSON file.
    """
    file_ptr = open(filename, 'rb')  # binary?  really?
    buffer_ = file_ptr.read().decode('utf-8')
    return json.loads(buffer_)


def report_filesave(filename, *, fast=False, get_str=False, color=True):
    """
    Prints a brief message about size and modification date on a
    specified file.  This should be more inheritancey.  This could be
    simplified by stripping all the <versatiledialogs> stuff out.
    """
    stats = os.stat(filename)
    int_bytes = stats.st_size
    if int_bytes >= 1024:
        filesize_str = f'{int_bytes / 1024:.2g} kibibytes'
    else:
        filesize_str = f'{int_bytes} bytes'
    msg = f"'{filename}': {filesize_str}, {time.ctime(stats.st_ctime)}"
    if color:
        msg = colored(msg, 'green')
    if get_str:
        return msg
    textwidgets.notify(msg)
    if not fast:
        textwidgets.wait()
    return None
