#!/usr/bin/env python3
"""
Template Window
"""
import sys

try:
    import gi

    gi.require_version('Gtk', '3.0')
    from gi.repository import Gtk
except ImportError:
    sys.exit('\nGtk+3.0 library not available.\n')

__author__ = 'Chris Horn <hammerhorn@gmail.com>'
__license__ = 'GPL'

#class AppWindow(Gtk.Window):
#    """
#    very minimal window template
#    """
#    def __init__(self, **kwargs):
#        super().__init__(**kwargs)
#        self.set_border_width(10)
#        self.connect('delete-event', Gtk.main_quit)


class ComboInputBox(Gtk.Box):
    """
    very minimal window template
    """
    def __init__(self, combo_list=None, label1='ComboBox', label2='Entry', **kwargs):
        super().__init__(
            orientation=Gtk.Orientation.HORIZONTAL, spacing=10, **kwargs)
        self.entry = Gtk.Entry()

        self.button = Gtk.Button(label='Go')
        self.connect('delete-event', Gtk.main_quit)

        list_store = Gtk.ListStore(str)
        for item in combo_list:
            list_store.append([item])

        self.combobox = Gtk.ComboBox.new_with_model(list_store)
        self.combobox.set_active(0)
        self.update_combo(self.combobox)
        self.combobox.connect("changed", self.update_combo)

        renderer_text = Gtk.CellRendererText()
        self.combobox.pack_start(renderer_text, True)
        self.combobox.add_attribute(renderer_text, "text", 0)

        combo_label = Gtk.Label(label=label1)
        combo_label.set_xalign(1)

        entry_label = Gtk.Label(label=label2)
        combo_label.set_xalign(1)

        left = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
        left.pack_start(combo_label, True, True, 0)
        left.pack_start(entry_label, True, True, 0)

        right = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=10)
        right.pack_start(self.combobox, True, True, 0)
        right.pack_start(self.entry, True, True, 0)
        self.pack_start(left, True, True, 0)
        self.pack_start(right, True, True, 0)
        self.pack_start(self.button, True, True, 0)

    def update_combo(self, combo):
        """
        update selected item in response to combobox
        """
        tree_iter = combo.get_active_iter()
        if tree_iter is not None:
            model = combo.get_model()
            self.selected_item = model[tree_iter][0]

class LabelledEntryBox(Gtk.Box):
    '''
    consists of a text entry box with a text label above it
    '''
    def __init__(self, label_markup, entry_text=None, **kwargs):
        super().__init__(spacing=5, **kwargs)
        self.label = Gtk.Label()
        self.label.set_markup(label_markup)
        self.label.set_xalign(1)
        self.entry = Gtk.Entry()
        if entry_text:
            self.entry.set_text(entry_text)
        self.pack_end(self.entry, False, None, 0)
        self.pack_end(self.label, False, None, 0)

class LabelledSpinButtonBox(Gtk.Box):
    '''
    consists of a text entry box with a text label above it
    '''
    def __init__(self, lo, hi, step, default, label_markup='SpinButton', **kwargs):
        super().__init__(**kwargs)
        self.label = Gtk.Label()
        self.label.set_markup(str(label_markup))
        self.spinbutton = Gtk.SpinButton.new_with_range(lo, hi, step)
        self.label.set_xalign(1)
        self.spinbutton.set_value(default)
        self.pack_end(self.spinbutton, False, None, 0)
        self.pack_end(self.label, False, None, 0)
