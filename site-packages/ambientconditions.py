#!/usr/bin/env python3
'''
Contains: class Ambient
'''
import math

__author__ = 'Chris Horn <hammerhorn@gmail.com>'

# Constants for Dew Point
B = 18.678
C = 257.14
D = 234.5

# Constants for Vapor Pressure Deficit
E = -1.0440397E4
F = -11.29465
G = -2.7022355E-2
H = 1.289036E-5
I = -2.4780681E-9
J = 6.5459673

class Ambient():
    '''
    Data related to a temperature and humidity pair
    '''
    def __init__(self, fahren, r_h):
        self.rel_hum = r_h
        self.cels = (fahren -32) * 5.0 / 9.0

        # grams per cubic meter
        self.ab_hum = 13.2471488 * math.exp(
            (17.67 * self.cels)/(self.cels + 243.5)) * self.rel_hum / (
                273.15 + self.cels) # not sure where this came from

    @property
    def app_heat_index(self):
        '''
        Return the approximate heat index factor based on a formula
        '''
        fahr = self.cels * 1.8 + 32
        approx = -42.379 + 2.04901523 * fahr + 10.14333127 * self.rel_hum \
                    - 0.22475541 * fahr * self.rel_hum - 6.83783E-3 * \
                    fahr ** 2 - 5.481717E-2 * self.rel_hum ** 2 + 1.22874E-3 *\
                    fahr**2 * self.rel_hum + 8.5282E-4 * fahr * \
                    self.rel_hum**2 - 1.99E-6 * fahr**2 * self.rel_hum**2
        if approx > self.cels * 1.8 + 32 >= 79:
            return approx
        return None

    @property
    def dew_point(self):
        '''
        returns the dew point in degrees celsius; maybe it should return
        a temperature object
        '''
        gamma = lambda celsius, r_h: math.log(r_h/100. * math.exp((B - celsius/D)*(
            celsius/(C+celsius))))
        return (C * gamma(self.cels, self.rel_hum))/(B - gamma(self.cels, self.rel_hum))

    @property
    def vp_deficit(self):
        '''
        returns the vapor pressure deficit in kPa; maybe it should return
        a pressure object
        '''
        def saturation_vp():
            rankine = self.cels * 1.8 + 32 + 459.67
            return math.exp(
                E / rankine + F + G * rankine + H * rankine**2 + I * rankine**3 + J \
                * math.log(rankine))

        sat_v_p = saturation_vp()

        def partial_vp():
            return sat_v_p * self.rel_hum / 100.

        return (sat_v_p - partial_vp()) * 6.89475729
