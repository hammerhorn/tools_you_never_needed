#coding=utf8
"""
Base class for most classes
"""
import abc
import os
import pickle

import fileio

__author__ = 'Chris Horn <hammerhorn@gmail.com>'
__license__ = 'GPL'


class Thing(abc.ABC):
    """
    Provides str 'label' and class int 'count'
    Contains methods for saving as txt or pickle.
    """
    count = 0  # number of instances of Things

    @abc.abstractmethod
    def __init__(self):
        """
        increments instance counter "count" and sets a default label.
        Child class must have its own __init__ method, and it must include
        super(ChildClassName, self).__init__() to inherit these attributes.
        """
        self.__class__.count += 1
        self.label = f'{self.__class__.__name__} #{self.__class__.count}'

    def __repr__(self):
        """
        returns a str 'self.label'
        """
        return self.label

    @staticmethod
    def _save(basename, ext_, save_func, verbose_=True):
        """
        Open the file, perform the appropriate save action and close the file.
        things to add: confirm filename and check for overwrite
        """
        filename = f'{basename}.{ext_}' if ext_ else basename
        dir_name = os.getcwd()
        if dir_name != '/':
            dir_name = '{dir_name}/'

         # Add a part to see if exists

        mode = 'wb' if ext_ == 'p' else 'w'
        #mode = 'w'
        with open(filename, mode) as handler:
            save_func(handler)
        if verbose_:
            fileio.report_filesave(filename)

    def write_txt(self, basename, ext='txt', verbose=True):
        """
        Cast object as str and write to a txt file.
        """
        text = f'{self.__str__()}\n'
        self._save(basename, ext, lambda f: f.write(text), verbose_=verbose)

    def save_p_file(self, filename, ext='p', verbose=True):
        """
        Save instance as a pickle.  (Use fileio.open_p_file() to open.)
        """
        if not ext:
            ext = filename.split('.')[-1]
        self._save(filename, ext, lambda f: pickle.dump(self, f), verbose_=verbose)
