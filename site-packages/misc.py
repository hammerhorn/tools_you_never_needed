#!/usr/bin/env python3
#coding=utf8
"""
contains: catch_help_flag(...),
          chomp(text),
          current_time()
          fahr_to_kelvins(fahr),
          is_first_run(),
          mmss_convert(in_str),
          speak(),
          welcome_str(year, author, title=)
"""
import datetime
import os
import socket
import subprocess
import sys

from termcolor import colored, cprint

MODULE_NAME = sys.argv[0].split('/')[-1].split('.')[0]

def catch_help_flag(*, help_str='',
                    condition=None,
                    cleanup=None, # a function to end with
                    title=MODULE_NAME):
    """
    An alternate implementation of the help dialog
    """
    if {'-h', '--help'} & set(sys.argv) or condition:
        title = title.replace('_', ' ').title()
        cprint(f'\n{title}', attrs=['bold', 'underline'], end='')
        if cleanup:
            cleanup()
        sys.exit(help_str)

def chomp(text):
    """
    Removes trailing whitespace, turning internal newlines into spaces.
    This should be moved.
    """
    text = text.replace('\n', ' ').strip()
    return text

def current_time():
    """
    Returns the current time as a formatted str.
    """
    today = datetime.datetime.today()
    return today.strftime('%l:%M:%S %P')

def end_app():
    """
    Write blank file __data__/$SCRIPTNAME.tmp to show that the script has
    run at least once.
    """
    filename = f'{MODULE_NAME}.tmp'
    if not os.path.exists('__data__'):
        os.makedirs('__data__')
    try:
        with open(f'__data__/{filename}', 'w'):
            pass
    except IOError:
        print('unable to write to file system', file=sys.stderr)

def fahr_to_kelvins(fahr):
    """
    Converts Fahrenheit to Kelvin.  This should be moved to fiziko.
    """
    celsius = (fahr - 32) * 5.0 / 9.0
    kelvins = celsius + 273.15
    return kelvins

def is_first_run():
    """
    Returns True if this is the current script's first run; otherwise,
    returns False.
    """
    filename = f'{MODULE_NAME}.tmp'
    current_dir = os.getcwd()
    return not os.path.exists(f'{current_dir}/__data__') or\
        filename not in os.listdir(f'{current_dir}/__data__')

def local_ip_addr():
    """
    returns your host's private IP address
    """
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.connect(("8.8.8.8", 80))
    local_ip = sock.getsockname()[0]
    sock.close()
    return local_ip

def mmss_convert(in_str):
    """
    Convert mm:ss => ss, hh:mm => mm or vice versa.
    """
    in_str = str(in_str)
    try:
        if ':' in in_str:
            mmss = tuple(in_str.split(':'))
            try:
                mins = int(mmss[0])
            except ValueError:
                mins = 0
            try:
                secs = float(mmss[1])
            except ValueError:
                secs = 0.0
            total_seconds = mins * 60.0 + secs
            return total_seconds

        total_seconds = float(in_str)
        mins = int(total_seconds) // 60
        secs = total_seconds % 60
        return f'{mins:d}:{secs:02g}'

    except ValueError:
        print(f"Invalid argument '{in_str}'.\n")
        return in_str


def speak(phrase):
    """
    Use a speech synthesizer (flite) to read text.
    """
    commandf = 'flite -voice slt -t "{}" > /dev/null 2>&1'
    proc = subprocess.Popen(commandf.format(phrase), shell=True)
    proc.wait()


def welcome_str(year, author, title=MODULE_NAME.upper()):
    """
    Returns a formatted string with copyright and license info
    """
    return (
        f"\n{colored(title, attrs=['bold'])}, Copyright (c){year}  {author}\n"
        f'\n'
        f'    This program comes with ABSOLUTELY NO WARRANTY.\n'
        f'    This is free software, and you are welcome to redistribute it under certain\n'
        f'    conditions.  For help, try pydoc or the --help option.\n'
        )
