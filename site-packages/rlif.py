"""
Edit or view simple JSON files
"""
import readline
import subprocess

import termcolor # 3rd party

import textwidgets # Local

class SimpleCompleter():
    """
    provides readline interface
    """
    def __init__(self, options):
        self.options = options
        #self.options.sort()
        self.options = sorted(self.options)
        self.matches = []

    def complete(self, text, state):
        """
        makes the completer work
        """
        response = None
        if state == 0:
            # This is the first time for this text, so build a match list.
            if text:
                self.matches = [s
                                for s in self.options
                                if s and s.startswith(text)]
            else:
                self.matches = self.options[:]

        # Return the state'th item from the match list,
        # if we have that many.
        try:
            response = self.matches[state]
        except IndexError:
            response = None
        return response

def howto():
    """A brief explanation for the user about how to use this interface"""
    termcolor.cprint('\nHit [TAB] to auto-complete,', attrs=['bold'])
    termcolor.cprint('[TAB][TAB] to see all options.', attrs=['bold'])

    print('You can use commas to string together multiple responses.')
    print("Anything starting with '!' will be interpreted as a shell command.\n")
    #print("Type 'quit' to end.\n")
    #textwidgets.wait('Got it!')

def cmd_loop(cmd_dict):
    """
    Use tab for completion, tab tab to see options.  Commands can be chained
    together with commas.  Use '!' to type shell commands, e.g., '!ls'.
    """
    # Register our completer function
    readline.set_completer(SimpleCompleter(cmd_dict.keys()).complete)

    # Use the tab key for completion
    readline.parse_and_bind('tab: complete')

    print(f'\n {list(cmd_dict.keys())}')
    while True:
        print('>', end='', flush=True)

        cmd_list = [cmd.strip() for cmd in input().split(',')]
        for command in cmd_list:
            if command and command[0] == '!':
                proc = subprocess.Popen(command[1:], shell=True)
                proc.wait()
                continue

            try:
                cmd_dict[command]()
            except KeyError:
                if command:
                    print(f'Unknown operation {command}.')
            print(f'\n {list(cmd_dict.keys())}', end='', flush=True)
            print()
